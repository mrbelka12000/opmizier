// Code generated by MockGen. DO NOT EDIT.
// Source: internal/contract.go

// Package internal is a generated GoMock package.
package internal

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/mrbelka12000/optimizer/internal/models"
)

// Mockadapter is a mock of adapter interface.
type Mockadapter struct {
	ctrl     *gomock.Controller
	recorder *MockadapterMockRecorder
}

// MockadapterMockRecorder is the mock recorder for Mockadapter.
type MockadapterMockRecorder struct {
	mock *Mockadapter
}

// NewMockadapter creates a new mock instance.
func NewMockadapter(ctrl *gomock.Controller) *Mockadapter {
	mock := &Mockadapter{ctrl: ctrl}
	mock.recorder = &MockadapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockadapter) EXPECT() *MockadapterMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *Mockadapter) List(ctx context.Context, pars models.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, pars)
	ret0, _ := ret[0].(error)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockadapterMockRecorder) List(ctx, pars interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*Mockadapter)(nil).List), ctx, pars)
}
